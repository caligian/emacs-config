(setq R-processes (ht))

(defun R-start (&optional buf)
  (interactive)
  (let* ((buf (or buf (current-buffer)))
		 (cwd (or (find-buffer-workspace buf)
				  (dirname buf)))
		 (proc (%. R-processes cwd)))
	(when (or (not proc)
			  (not (process-live? proc)))
	  (when-let* ((buf (R))
				  (buf-win (get-buffer-window buf))
				  (proc (get-buffer-process buf)))
		(%! R-processes cwd proc)
		(kbd! :states '(normal)
			  :keymaps 'local
			  "q" 'delete-window)
		proc))))

(defun R-get-buffer (&optional buf return-cwd?)
  (when-let ((buf (or buf (current-buffer)))
			 (ws (or (find-buffer-workspace buf)
					 (dirname buf)))
			 (proc (%. R-processes ws))
			 (live? (process-live? proc)))
	(if (not return-cwd?)
		proc
	  (list proc ws))))

(defun R-stop (&optional buf)
  (when-let* ((proc-and-cwd (R-get-buffer buf t))
			  (proc (car proc-and-cwd))
			  (cwd (last@ proc-and-cwd))
			  (proc-buf (process-buffer proc)))
	(stop-process proc)
	(%rm R-processes cwd)
	(when-let* ((win (get-buffer-window proc-buf)))
	  (delete-window win))))

(defun R-show (&optional buf direction)
  (when-let* ((direction (or direction :below))
			  (proc (R-get-buffer buf))
			  (proc-buf (process-buffer proc))
			  (not-displaying? (not (get-buffer-window proc-buf))))
	(pcase direction
	  (:below (split-window-below))
	  (:right (split-window-right)))
	(other-window 1)
	(switch-to-buffer proc-buf)))

(defun R-split-below (&optional buf)
  (interactive)
  (R-show buf :below))

(defun R-split-right (&optional buf)
  (interactive)
  (R-show buf :right))

(defun R-hide (&optional buf)
  (interactive)
  (when-let* ((proc-and-cwd (R-get-buffer buf t))
			  (proc (car proc-and-cwd))
			  (cwd (last@ proc-and-cwd))
			  (proc-buf (process-buffer proc))
			  (win (get-buffer-window proc-buf)))
	(delete-window win)))

(defun R-eval (&optional buf what)
  (when-let* ((buf (or buf (current-buffer)))
			  (proc (R-get-buffer buf))
			  (what (or what :region))
			  (text (concat (pcase what
							  (:region (buffer-get-region buf))
							  (:buffer (buffer2string buf))
							  (:line (buffer-current-line buf)))
							"\n")))
	(process-send-string proc text)))

(defun R-eval-region (&optional buf)
  (interactive)
  (R-eval buf :region))

(defun R-eval-buffer (&optional buf)
  (interactive)
  (R-eval buf :buffer))

(defun R-eval-line (&optional buf)
  (interactive)
  (R-eval buf :line))
